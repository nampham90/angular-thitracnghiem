{"ast":null,"code":"import { tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../_services/loading.service\";\nexport let HttpErrorService = /*#__PURE__*/(() => {\n  class HttpErrorService {\n    constructor(loadding) {\n      this.loadding = loadding;\n    }\n\n    intercept(req, next) {\n      const started = Date.now();\n      let ok;\n      this.loadding.requestStart(); // extend server response observable with logging\n\n      return next.handle(req).pipe(tap({\n        // Succeeds when there is a response; ignore other events\n        next: event => {\n          setTimeout(() => {\n            this.loadding.requestEnded();\n          }, 5000);\n          console.log(\"sucess\" + started);\n        },\n        // Operation failed; error is an HttpErrorResponse\n        error: error => {\n          setTimeout(() => {\n            this.loadding.requestEnded();\n          }, 5000); //this.loadding.requestEnded();\n        }\n      }));\n    }\n\n  }\n\n  HttpErrorService.ɵfac = function HttpErrorService_Factory(t) {\n    return new (t || HttpErrorService)(i0.ɵɵinject(i1.LoadingService));\n  };\n\n  HttpErrorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HttpErrorService,\n    factory: HttpErrorService.ɵfac,\n    providedIn: 'root'\n  });\n  return HttpErrorService;\n})();","map":null,"metadata":{},"sourceType":"module"}